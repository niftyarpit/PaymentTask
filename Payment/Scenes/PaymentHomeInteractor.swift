//
//  PaymentHomeInteractor.swift
//  Payment
//
//  Created by ARPIT  SRIVASTAVA on 03/12/18.
//  Copyright (c) 2018 Arpit. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentHomeBusinessLogic {
    func fetchPaymentOptions(request: PaymentHome.PaymentOptions.Request)
}

protocol PaymentHomeDataStore {
    //var name: String { get set }
}

class PaymentHomeInteractor: PaymentHomeBusinessLogic, PaymentHomeDataStore {
    var presenter: PaymentHomePresentationLogic?
    lazy var worker = PaymentHomeWorker()
    
    // MARK: Do something
    
    func fetchPaymentOptions(request: PaymentHome.PaymentOptions.Request) {
        worker.fetchPaymentOptionsData {[weak self] (result: FetchDataResult) in
            guard let strongSelf = self else { return }
            switch result {
            case .success(let fetchedData):
                let responseNode = fetchedData["responseNode"] as! ResponseNode
                let response = strongSelf.getResponse(from: responseNode)
                strongSelf.presenter?.presentPaymentOptions(response: response)
            case .failure(let error):
                switch error {
                case .cannotFetch(let errorMessage):
                    break
                }
            }
        }
    }
    
    private func getResponse(from responseNode: ResponseNode) -> PaymentHome.PaymentOptions.Response {
        let alertInfo = responseNode.alert_info
        let alertError = responseNode.alert_error
        var netbankingNode: PaymentHome.PaymentOptions.Response.NetbankingResponse?
        var cardNode: PaymentHome.PaymentOptions.Response.CardResponse?
        var upiNode: PaymentHome.PaymentOptions.Response.UPIResponse?
        var wallets: [PaymentHome.PaymentOptions.Response.WalletResponse] = []
        if let netbanking = responseNode.netbanking {
            let enabled = netbanking.enabled
            let pg = netbanking.pg
            var preferredBanks: [PaymentHome.PaymentOptions.Response.NetbankingResponse.PreferredResponse] = []
            for bank in netbanking.preferred {
                let priority = bank.priority
                let logo = bank.logo
                let code = bank.code
                let name = bank.name
                preferredBanks += [PaymentHome.PaymentOptions.Response.NetbankingResponse.PreferredResponse(priority: priority,
                                                                                                            logo: logo,
                                                                                                            code: code,
                                                                                                            name: name)]
            }
            let all = netbanking.all
            netbankingNode = PaymentHome.PaymentOptions.Response.NetbankingResponse(enabled: enabled,
                                                                                    pg: pg,
                                                                                    preferred: preferredBanks,
                                                                                    all: all)
        }
        if let card = responseNode.card {
            let enabled = card.enabled
            let pg = card.pg
            var cards: [PaymentHome.PaymentOptions.Response.CardResponse.SavedCardResponse] = []
            for lCard in card.cards {
                let logo = lCard.logo
                let number = lCard.number
                cards += [PaymentHome.PaymentOptions.Response.CardResponse.SavedCardResponse(logo: logo,
                                                                                             number: number)]
            }
            cardNode = PaymentHome.PaymentOptions.Response.CardResponse(enabled: enabled,
                                                                        pg: pg,
                                                                        cards: cards)
        }
        if let upi = responseNode.upi {
            let enabled = upi.enabled
            let pg = upi.pg
            upiNode = PaymentHome.PaymentOptions.Response.UPIResponse(enabled: enabled,
                                                                      pg: pg)
        }
        for item in responseNode.wallet {
            let name = item.name
            let code = item.code
            let logo = item.logo
            let pg = item.pg
            let linkingEnabled = item.linking_enabled
            let enabled = item.enabled
            wallets += [PaymentHome.PaymentOptions.Response.WalletResponse(name: name,
                                                                           code: code,
                                                                           logo: logo,
                                                                           pg: pg,
                                                                           linkingEnabled: linkingEnabled,
                                                                           enabled: enabled)]
        }
        let response = PaymentHome.PaymentOptions.Response(alertInfo: alertInfo,
                                                           alertError: alertError,
                                                           card: cardNode,
                                                           netbanking: netbankingNode,
                                                           wallet: wallets,
                                                           upi: upiNode)
        return response
    }
}
