//
//  CardViewController.swift
//  Payment
//
//  Created by ARPIT  SRIVASTAVA on 12/12/18.
//  Copyright (c) 2018 Arpit. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CardDisplayLogic: class {
    func displayInitial(viewModel: Card.Payment.ViewModel)
}

class CardViewController: UIViewController, CardDisplayLogic {
    var interactor: CardBusinessLogic?
    var router: (NSObjectProtocol & CardRoutingLogic & CardDataPassing)?
    var cellItems: [CardCellId] = []
    lazy var cardDetails = Card.CardDetails()
    
    @IBOutlet weak var tblView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CardInteractor()
        let presenter = CardPresenter()
        let router = CardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Card Payment"
        doInitial()
    }
    
    // MARK: Do something
    
    func doInitial() {
        let request = Card.Payment.Request(cardDetails: cardDetails)
        interactor?.doInitial(request: request)
    }
    
    func displayInitial(viewModel: Card.Payment.ViewModel) {
        cellItems = viewModel.cellItems
        if viewModel.shouldReload {
            DispatchQueue.main.async { [weak self] in
                self?.tblView.reloadData()
            }
        }
    }
}

extension CardViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return cellItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = UITableViewCell()
        switch cellItems[indexPath.row].type {
        case .cardNumber, .validThrough, .cvv:
            guard let cardModel = cellItems[indexPath.row] as? Card.Payment.ViewModel.CardPaymentViewModel else {
                break
            }
            let lCell = tableView.dequeueReusableCell(withIdentifier: CardPaymentConstants.Values.IdentifierNames.CardPaymentTableCell, for: indexPath) as! CardPaymentTableViewCell
            lCell.configureCell(with: cardModel)
            lCell.datePickerHandler = { [weak self] monthYear in
                guard let strongSelf = self else { return }
                strongSelf.cardDetails.expiryDate = monthYear
                strongSelf.cardDetails.shouldReload = false
                strongSelf.doInitial()
            }
            lCell.txtFieldDoneHandler = { [weak self] in
                guard let strongSelf = self else { return }
                strongSelf.view.endEditing(true)
            }
            lCell.txtDidChangeHandler = { [weak self] type, text in
                guard let strongSelf = self else { return }
                switch type {
                case .cardNumber:
                    strongSelf.cardDetails.cardNumber = text
                case .cvv:
                    strongSelf.cardDetails.cvv = text
                case .validThrough, .save, .pay:
                    break
                }
                strongSelf.cardDetails.shouldReload = false
                strongSelf.doInitial()
            }
            cell = lCell
        case .save:
            guard let saveModel = cellItems[indexPath.row] as? Card.Payment.ViewModel.SaveViewModel else {
                break
            }
            let lCell = tableView.dequeueReusableCell(withIdentifier: CardPaymentConstants.Values.IdentifierNames.SaveTableCell, for: indexPath) as! CardPaymentSaveTableViewCell
            lCell.configureCell(with: saveModel)
            cell = lCell
        case .pay:
            guard let payModel = cellItems[indexPath.row] as? Card.Payment.ViewModel.PayViewModel else {
                break
            }
            let lCell = tableView.dequeueReusableCell(withIdentifier: CardPaymentConstants.Values.IdentifierNames.PayTableCell, for: indexPath) as! CardPaymentPayTableViewCell
            lCell.configureCell(with: payModel)
            cell = lCell
        }
        return cell
    }
}
