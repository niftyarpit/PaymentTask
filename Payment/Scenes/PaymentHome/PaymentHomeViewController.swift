//
//  PaymentHomeViewController.swift
//  Payment
//
//  Created by ARPIT  SRIVASTAVA on 03/12/18.
//  Copyright (c) 2018 Arpit. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentHomeDisplayLogic: class {
    func displayPaymentOptions(viewModel: PaymentHome.PaymentOptions.ViewModel)
}

class PaymentHomeViewController: UIViewController, PaymentHomeDisplayLogic {
    var interactor: PaymentHomeBusinessLogic?
    var router: (NSObjectProtocol & PaymentHomeRoutingLogic & PaymentHomeDataPassing)?
    
    private var summary: [Identifiable] = []
    @IBOutlet weak var tableView: UITableView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PaymentHomeInteractor()
        let presenter = PaymentHomePresenter()
        let router = PaymentHomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchPaymentOptions()
    }
    
    // MARK: Do something
    
    func fetchPaymentOptions() {
        let request = PaymentHome.PaymentOptions.Request()
        interactor?.fetchPaymentOptions(request: request)
    }
    
    func displayPaymentOptions(viewModel: PaymentHome.PaymentOptions.ViewModel) {
        summary = viewModel.summary
        tableView.reloadData()
    }
}

extension PaymentHomeViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return summary.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        var rows = 1
        let identifier = summary[section].identifier
        switch identifier {
        case SectionType.wallet.rawValue:
            let model = summary[section] as! PaymentHome.PaymentOptions.ViewModel.WalletSectionViewModel
            rows = model.info.count
        case SectionType.card.rawValue:
            let model = summary[section] as! PaymentHome.PaymentOptions.ViewModel.CardSectionViewModel
            rows = model.info.count
        case SectionType.netbank.rawValue:
            let model = summary[section] as! PaymentHome.PaymentOptions.ViewModel.NetbankSectionViewModel
            rows = model.info.count
        default:
            break
        }
        return rows
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = UITableViewCell()
        let identifier = summary[indexPath.section].identifier
        switch identifier {
        case SectionType.upi.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.UPISectionViewModel
            let info = model.info[indexPath.row]
            let infoIdentifier = info.identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.UPITableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! UPITableCell
                cell = lCell
            default:
                break
            }
        case SectionType.card.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.CardSectionViewModel
            let info = model.info[indexPath.row]
            let infoIdentifier = info.identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! HeaderTableCell
                let headerModel = info as! PaymentHome.PaymentOptions.ViewModel.HeaderViewModel
                lCell.configureCellWithModel(headerModel)
                cell = lCell
            case PaymentHomeConstants.Values.IdentifierNames.SavedCardTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! SavedCardTableCell
                let cardModel = info as! PaymentHome.PaymentOptions.ViewModel.CardsViewModel.CardViewModel
                lCell.configureCellWithModel(cardModel)
                cell = lCell
            case PaymentHomeConstants.Values.IdentifierNames.FooterTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! FooterTableCell
                let footerModel = info as! PaymentHome.PaymentOptions.ViewModel.FooterViewModel
                lCell.configureCellWithModel(footerModel)
                cell = lCell
            default:
                break
            }
        case SectionType.wallet.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.WalletSectionViewModel
            let info = model.info[indexPath.row]
            let infoIdentifier = info.identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! HeaderTableCell
                let headerModel = info as! PaymentHome.PaymentOptions.ViewModel.HeaderViewModel
                lCell.configureCellWithModel(headerModel)
                cell = lCell
            case PaymentHomeConstants.Values.IdentifierNames.WalletTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! WalletTableCell
                let walletModel = info as! PaymentHome.PaymentOptions.ViewModel.WalletsViewModel.WalletViewModel
                lCell.configureCellWithModel(walletModel)
                cell = lCell
            default:
                break
            }
        case SectionType.netbank.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.NetbankSectionViewModel
            let info = model.info[indexPath.row]
            let infoIdentifier = info.identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! HeaderTableCell
                let headerModel = info as! PaymentHome.PaymentOptions.ViewModel.HeaderViewModel
                lCell.configureCellWithModel(headerModel)
                cell = lCell
            case PaymentHomeConstants.Values.IdentifierNames.NetBanksTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! NetBanksTableCell
                let preferredBanksModel = info as! PaymentHome.PaymentOptions.ViewModel.PreferredBanksViewModel
                lCell.configureCellWithModel(preferredBanksModel.banks)
                lCell.bankClickHandler = {[weak self] code in
                    print(code)
                }
                cell = lCell
            case PaymentHomeConstants.Values.IdentifierNames.FooterTableCell:
                let lCell = tableView.dequeueReusableCell(withIdentifier: infoIdentifier,
                                                          for: indexPath) as! FooterTableCell
                let footerModel = info as! PaymentHome.PaymentOptions.ViewModel.FooterViewModel
                lCell.configureCellWithModel(footerModel)
                cell = lCell
            default:
                break
            }
        default:
            break
        }
        return cell
    }
}

extension PaymentHomeViewController: UITableViewDelegate {
    
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let height: CGFloat = 5
        return height
    }
    
    public func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        let height: CGFloat = CGFloat.leastNonzeroMagnitude
        return height
    }
    
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let identifier = summary[indexPath.section].identifier
        switch identifier {
        case SectionType.upi.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.UPISectionViewModel
            let infoIdentifier = model.info[indexPath.row].identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.UPITableCell:
                router?.routeToUPI()
            default:
                break
            }
        case SectionType.netbank.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.NetbankSectionViewModel
            let infoIdentifier = model.info[indexPath.row].identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.FooterTableCell:
                router?.routeToMoreBanks()
            default:
                break
            }
        case SectionType.wallet.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.WalletSectionViewModel
            let infoIdentifier = model.info[indexPath.row].identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.WalletTableCell:
                router?.routeToPayWallet()
            default:
                break
            }
        case SectionType.card.rawValue:
            let model = summary[indexPath.section] as! PaymentHome.PaymentOptions.ViewModel.CardSectionViewModel
            let infoIdentifier = model.info[indexPath.row].identifier
            switch infoIdentifier {
            case PaymentHomeConstants.Values.IdentifierNames.FooterTableCell:
                router?.routeToCard()
                break
            default:
                break
            }
        default:
            break
        }
    }


}
