//
//  PaymentHomePresenter.swift
//  Payment
//
//  Created by ARPIT  SRIVASTAVA on 03/12/18.
//  Copyright (c) 2018 Arpit. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentHomePresentationLogic {
    func presentPaymentOptions(response: PaymentHome.PaymentOptions.Response)
}

class PaymentHomePresenter: PaymentHomePresentationLogic {
    weak var viewController: PaymentHomeDisplayLogic?
        
    func presentPaymentOptions(response: PaymentHome.PaymentOptions.Response) {
        let viewModel = getViewModel(from: response)
        viewController?.displayPaymentOptions(viewModel: viewModel)
    }
    
    private func getViewModel(from response: PaymentHome.PaymentOptions.Response) -> PaymentHome.PaymentOptions.ViewModel {
        var summary: [Identifiable] = []
        if let upi = response.upi {
            var info: [Identifiable] = []
            info += [PaymentHome.PaymentOptions.ViewModel.UPIViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.UPITableCell)]
            summary += [PaymentHome.PaymentOptions.ViewModel.UPISectionViewModel(identifier: SectionType.upi.rawValue,
                                                                                 info: info)]
        }
        if let card = response.card {
            var info: [Identifiable] = []
            if card.cards.count > 0 {
                let header = PaymentHome.PaymentOptions.ViewModel.HeaderViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell,
                                                                                   text: "Saved Cards")
                info += [header]
                for (index,lCard) in card.cards.enumerated() {
                    info += [PaymentHome.PaymentOptions.ViewModel.CardsViewModel.CardViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.SavedCardTableCell,
                                                                                               imageUrl: lCard.logo,
                                                                                                number: lCard.number,
                                                                                                isExpanded: lCard.isExpanded,
                                                                                                index: index)]
                }
            }
            let footer = PaymentHome.PaymentOptions.ViewModel.FooterViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.FooterTableCell,
                                                                               text: "Debit / Credit Card Payment")
            info += [footer]
            summary += [PaymentHome.PaymentOptions.ViewModel.CardSectionViewModel(identifier: SectionType.card.rawValue,
                                                                           info: info)]
        }
        if response.wallet.count > 0 {
            var info: [Identifiable] = []
            let header = PaymentHome.PaymentOptions.ViewModel.HeaderViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell,
                                                                               text: "Wallets")
            info += [header]
            for wallet in response.wallet {
                info += [PaymentHome.PaymentOptions.ViewModel.WalletsViewModel.WalletViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.WalletTableCell,
                                                                                               imageUrl: wallet.logo,
                                                                                               code: wallet.code,
                                                                                               name: wallet.name,
                                                                                               isLinked: wallet.linked)]
            }
            summary += [PaymentHome.PaymentOptions.ViewModel.WalletSectionViewModel(identifier: SectionType.wallet.rawValue,
                                                                                    info: info)]
        }
        if response.otherWallet.count > 0 {
            var info: [Identifiable] = []
            let header = PaymentHome.PaymentOptions.ViewModel.HeaderViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell,
                                                                              text: "Other Wallets")
            info += [header]
            var otherWallets: [PaymentHome.PaymentOptions.ViewModel.OtherWalletsViewModel.OtherWalletViewModel] = []
            for otherWallet in response.otherWallet {
                otherWallets += [PaymentHome.PaymentOptions.ViewModel.OtherWalletsViewModel.OtherWalletViewModel(imageUrl: otherWallet.logo,
                                                                                                                 code: otherWallet.code,
                                                                                                                 name: otherWallet.name)]
            }
            info += [PaymentHome.PaymentOptions.ViewModel.OtherWalletsViewModel.init(identifier: PaymentHomeConstants.Values.IdentifierNames.OtherWalletsTableCell,
                                                                                     otherWallets: otherWallets)]
            summary += [PaymentHome.PaymentOptions.ViewModel.OtherWalletSectionViewModel(identifier: SectionType.otherwallet.rawValue,
                                                                                         info: info)]
        }
        if let netbanking = response.netbanking {
            var info: [Identifiable] = []
            if netbanking.preferred.count > 0 {
                let header = PaymentHome.PaymentOptions.ViewModel.HeaderViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.HeaderTableCell,
                                                                                  text: "Net Banking")
                info += [header]
                var banks: [PaymentHome.PaymentOptions.ViewModel.PreferredBanksViewModel.PreferredBankViewModel] = []
                for preferred in netbanking.preferred {
                    banks += [PaymentHome.PaymentOptions.ViewModel.PreferredBanksViewModel.PreferredBankViewModel(imageUrl: preferred.logo,
                                                                                                                  code: preferred.code,
                                                                                                                  name: preferred.name)]
                }
                info += [PaymentHome.PaymentOptions.ViewModel.PreferredBanksViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.NetBanksTableCell,
                                                                                                     banks: banks)]

            }
            let footer = PaymentHome.PaymentOptions.ViewModel.FooterViewModel(identifier: PaymentHomeConstants.Values.IdentifierNames.FooterTableCell,
                                                                              text: "More Banks")
            info += [footer]
            summary += [PaymentHome.PaymentOptions.ViewModel.NetbankSectionViewModel(identifier: SectionType.netbank.rawValue,
                                                                                  info: info)]
        }
        let viewModel = PaymentHome.PaymentOptions.ViewModel(summary: summary)
        return viewModel
    }
    
    
}
